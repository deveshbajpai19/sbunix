/* isr.c
 *
 *  Created on: 3 Jul 2011
 *      Author: cds
 */

#include<defs.h>
#include<print.h>

#include<ports.h>
#include<kbc.h>
#include <sys/timer.h>
#include<sys/isr.h>
#include<process.h>
#include <sys/gdt.h>

bool sflag=true;
task *prev;
task *next;

int no_of_process=2;


void isr_handler0(struct isr_stack_frame *stack) {

        print("DIVIDE BY ZERO ERROR!\n");
        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler1(struct isr_stack_frame *stack) {

        print("isr 1\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler2(struct isr_stack_frame *stack) {

        print("isr 2\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler3(struct isr_stack_frame *stack) {

        print("isr 3\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler4(struct isr_stack_frame *stack) {

        print("isr 4\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler5(struct isr_stack_frame *stack) {

        print("isr 5\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler6(struct isr_stack_frame *stack) {

        print("isr 6\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler7(struct isr_stack_frame *stack) {

        print("isr 7\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler8(struct isr_stack_frame *stack) {

        print("isr 8\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler9(struct isr_stack_frame *stack) {

        print("isr 9\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler10(struct isr_stack_frame *stack) {

        print("isr 10\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler11(struct isr_stack_frame *stack) {

        print("isr 11\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler12(struct isr_stack_frame *stack) {

        print("isr 12\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler13(struct isr_stack_frame *stack) {

        print("isr 13\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}
void isr_handler14(struct isr_stack_frame *stack) {

        print("isr 14\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler15(struct isr_stack_frame *stack) {

        print("isr 15\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler16(struct isr_stack_frame *stack) {

        print("isr 16\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler17(struct isr_stack_frame *stack) {

        print("isr 17\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler18(struct isr_stack_frame *stack) {

        print("isr 18\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler19(struct isr_stack_frame *stack) {

        print("isr 19\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler20(struct isr_stack_frame *stack) {

        print("isr 20\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler21(struct isr_stack_frame *stack) {

        print("isr 21\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}


void isr_handler22(struct isr_stack_frame *stack) {

        print("isr 22\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}


void isr_handler23(struct isr_stack_frame *stack) {

        print("isr 23\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}


void isr_handler24(struct isr_stack_frame *stack) {

        print("isr 24\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler25(struct isr_stack_frame *stack) {

        print("isr 25\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler26(struct isr_stack_frame *stack) {

        print("isr 26\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler27(struct isr_stack_frame *stack) {

        print("isr 27\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler28(struct isr_stack_frame *stack) {

        print("isr 28\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler29(struct isr_stack_frame *stack) {

        print("isr 29\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler30(struct isr_stack_frame *stack) {

        print("isr 30\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler31(struct isr_stack_frame *stack) {

        print("isr 31\n");
//        print("    CS:0x%x\n",stack->cs);
//        print("   RIP:0x%x\n",stack->rip);
      __asm__( "hlt" );
}

void isr_handler32(struct isr_stack_frame *stack) {

        outb(0x20, 0x20);
        timer_callback();
}
void isr_handler33(struct isr_stack_frame *stack) {


        outb(0x20, 0x20);
        kbc_irq();
}

void isr_handler128(struct isr_stack_frame *stack) {

        print("Inside Yield");
      //  schedule();
      
        static int i=0;

        prev = (task *)&readyQ[i]; 
        i = (i + 1) % no_of_process; 
        next = (task *)&readyQ[i]; 
 
            asm volatile("cli");
          //  asm volatile("popq %r15");
          //  asm volatile("popq %r15");
            

            asm volatile("addq $0x10,%rsp");
            asm volatile("pushq %rax");
            asm volatile("pushq %rbx");
            asm volatile("pushq %rcx");
            asm volatile("pushq %rdx");
            asm volatile("pushq %rsi");
            asm volatile("pushq %rdi");
            asm volatile("pushq %r8");
            asm volatile("pushq %r9");
            asm volatile("pushq %r10");
            asm volatile("pushq %r11");
       
            __asm__ __volatile__(
                "movq %%rsp, %0;"
                :"=m"(prev->rsp)
                :
                :"memory"
            );
    
            asm volatile("movq %0, %%cr3":: "a"(next->cr3));
    
            __asm__ __volatile__ (
                "movq %0, %%rsp;"
                :
                :"m"(next->rsp)
                :"memory"
            );

            tss.rsp0=(uint64_t)&next->stack[63];

            //switch_to(&readyQ[0], &readyQ[1]);
            asm volatile("popq %r11");
            asm volatile("popq %r10");
            asm volatile("popq %r9");
            asm volatile("popq %r8");
            asm volatile("popq %rdi");
            asm volatile("popq %rsi");
            asm volatile("popq %rdx");
            asm volatile("popq %rcx");
            asm volatile("popq %rbx");
            asm volatile("popq %rax");
            asm volatile("sti");
            asm volatile("iretq");
        
}
